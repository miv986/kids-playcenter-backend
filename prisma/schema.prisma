// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para el rol del usuario
enum Role {
  USER
  CHILD
  ADMIN
}

enum Status {
  PENDING
  CANCELLED
  CONFIRMED
  CLOSED
  OPEN
}

enum Package {
  ALEGRIA
  FIESTA
  ESPECIAL
}

// Tabla de usuarios
model User {
  id             Int       @id @default(autoincrement())
  name           String
  surname        String
  email          String?    @unique
  phone_number   String?
  emergency_phone_1  String?   // primer teléfono de emergencia
  emergency_contact_name_1 String?
  emergency_phone_2  String?   // segundo teléfono de emergencia
  emergency_contact_name_2 String?
  role           Role      @default(USER)
  password       String?
  isEmailVerified Boolean  @default(false) // <-- campo para verificación de email
  emailVerifyToken String? // <-- token temporal para confirmar email
  notes              String?
  dateOfBirth        DateTime? // útil para hijos
  allergies          String?
  medicalNotes       String?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  //Relación con bookings
  bookings       DaycareBooking[] // Relación 1 a muchos con Bookings

  //Relación tutor-hijo
  children           User[]    @relation("TutorChildren")        // los hijos que tiene este tutor
  tutorId            Int?                                          
  tutor              User?     @relation("TutorChildren", fields: [tutorId], references: [id])

}

//Tabla de reservas de ludoteca
model DaycareBooking {
  id               Int      @id @default(autoincrement())
  comments         String?
  status           Status   @default(PENDING)

  startTime        DateTime
  endTime          DateTime


  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId           Int
  user             User     @relation(fields: [userId], references: [id])

  // Relación con los slots afectados

  slots             DaycareSlot[] @relation("DaycareSlotBookings")

}

//Tabla de plazas para reservas de ludoteca diaria

model DaycareSlot {
  id              Int       @id @default(autoincrement())
  date            DateTime   // Día del slot
  hour            Int   // Hora de inicio del slot ej. 17
  

  capacity        Int        // Número total de plazas (por ejemplo 20)
  availableSpots  Int        // Plazas restantes
  status          Status     @default(OPEN)

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relación con reservas de ludoteca
  bookings        DaycareBooking[] @relation("DaycareSlotBookings")

}

  

// Tabla de reservas de cumpleaños
model BirthdayBooking {
  id               Int      @id @default(autoincrement())
  guestEmail       String
  guest            String   
  number_of_kids   Int
  contact_number   String
  comments         String?
  packageType      Package
  status           Status   @default(PENDING)

  slotId           Int      @unique
  slot             BirthdaySlot @relation(fields: [slotId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

}

// Plazas para reservas de cumpleaños
model BirthdaySlot {

  id          Int       @id @default(autoincrement())
  date        DateTime  // día del cumpleaños
  startTime   DateTime  // hora de inicio
  endTime     DateTime  // hora de fin


  status      Status    @default(CLOSED)

  booking     BirthdayBooking? // reserva que ocupa este slot
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



